datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
  timers        Timer[]
  configs       Config[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Playlist {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  videos   Video[]
  isGlobal Boolean
  userId   String?
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type Video {
  id          String
  title       String
  description String
  thumbnails  Thumbnails
  timers      VideoTimer[]
}

type Thumbnails {
  medium  Thumbnail
  default Thumbnail
}

type Thumbnail {
  url String
}

type VideoTimer {
  index     Int
  pauseTime Int
  videoTime String
}

type Timer {
  name     String
  playtime Int
  default  Boolean
}

type Config {
  name             String
  loadOnInit       Boolean
  inputOptions     InputOptions
  loadPlaylistPage String?
}

type InputOptions {
  method        String?
  size          String
  dwellTime     Int
  fixedPosition Boolean
}
